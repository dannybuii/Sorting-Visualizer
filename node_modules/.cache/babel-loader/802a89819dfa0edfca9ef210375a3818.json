{"ast":null,"code":"export function mergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  console.log(animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\n  if (startIndex == endIndex) return;\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\n  mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\n  merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n}\n\nfunction merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\n  let k = startIndex;\n  let i = startIndex;\n  let j = middleIndex + 1;\n\n  while (i <= middleIndex && j <= endIndex) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIndex) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIndex) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["C:/Users/Danny/Documents/Web_Projects/Sorting-Visualizer/src/SortingVisualizerAlgorithms/mergeSort.js"],"names":["mergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","console","log","mainArray","startIndex","endIndex","middleIndex","Math","floor","merge","k","i","j","push"],"mappings":"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","sourcesContent":["export function mergeSort(array) {\r\n  const animations = [];\r\n\r\n  if (array.length <= 1) return array;\r\n\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  console.log(animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIndex == endIndex) return;\r\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSortHelper(\r\n    auxiliaryArray,\r\n    startIndex,\r\n    middleIndex,\r\n    mainArray,\r\n    animations\r\n  );\r\n  mergeSortHelper(\r\n    auxiliaryArray,\r\n    middleIndex + 1,\r\n    endIndex,\r\n    mainArray,\r\n    animations\r\n  );\r\n  merge(\r\n    mainArray,\r\n    startIndex,\r\n    middleIndex,\r\n    endIndex,\r\n    auxiliaryArray,\r\n    animations\r\n  );\r\n}\r\n\r\nfunction merge(\r\n  mainArray,\r\n  startIndex,\r\n  middleIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIndex;\r\n  let i = startIndex;\r\n  let j = middleIndex + 1;\r\n\r\n  while (i <= middleIndex && j <= endIndex) {\r\n    animations.push([i, j]);\r\n\r\n    animations.push([i, j]);\r\n\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n  while (i <= middleIndex) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n\r\n  while (j <= endIndex) {\r\n    animations.push([j, j]);\r\n\r\n    animations.push([j, j]);\r\n\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}