{"ast":null,"code":"export function quickSort(array) {\n  const animations = [];\n  let low = 0;\n  let high = array.length - 1;\n  quickSortHelper(array, low, high, animations);\n  return array;\n}\n\nfunction quickSortHelper(array, l, h, animations) {\n  if (l < h) {\n    let pi = partition(array, l, h, animations);\n    quickSortHelper(array, l, pi - 1, animations);\n    quickSortHelper(array, pi + 1, h, animations);\n  }\n\n  return array;\n}\n\nfunction partition(array, l, h, animations) {\n  let pivot = array[h];\n  let i = l - 1;\n  let left = l;\n  let right = h;\n\n  for (let j = l; j <= h - 1; j++) {\n    if (array[j] < pivot) {\n      i++;\n      animations.push([[i, array[j]], true]);\n      animations.push([[j, array[i]], true]);\n      swap(array, i, j);\n    }\n  }\n\n  animations.push([[h, array[i + 1]], true]);\n  animations.push([[i + 1, array[h]], true]);\n  swap(array, i + 1, h);\n  return i + 1;\n}\n\nfunction swap(array, i, j) {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}","map":{"version":3,"sources":["C:/Users/Danny/Documents/Sorting Visualizer/my-app/src/SortingVisualizerAlgorithms/quickSort.js"],"names":["quickSort","array","animations","low","high","length","quickSortHelper","l","h","pi","partition","pivot","i","left","right","j","push","swap","temp"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,IAAI,GAAGH,KAAK,CAACI,MAAN,GAAe,CAA1B;AACAC,EAAAA,eAAe,CAACL,KAAD,EAAQE,GAAR,EAAaC,IAAb,EAAmBF,UAAnB,CAAf;AACA,SAAOD,KAAP;AACD;;AAED,SAASK,eAAT,CAAyBL,KAAzB,EAAgCM,CAAhC,EAAmCC,CAAnC,EAAsCN,UAAtC,EAAkD;AAChD,MAAIK,CAAC,GAAGC,CAAR,EAAW;AACT,QAAIC,EAAE,GAAGC,SAAS,CAACT,KAAD,EAAQM,CAAR,EAAWC,CAAX,EAAcN,UAAd,CAAlB;AACAI,IAAAA,eAAe,CAACL,KAAD,EAAQM,CAAR,EAAWE,EAAE,GAAG,CAAhB,EAAmBP,UAAnB,CAAf;AACAI,IAAAA,eAAe,CAACL,KAAD,EAAQQ,EAAE,GAAG,CAAb,EAAgBD,CAAhB,EAAmBN,UAAnB,CAAf;AACD;;AACD,SAAOD,KAAP;AACD;;AAED,SAASS,SAAT,CAAmBT,KAAnB,EAA0BM,CAA1B,EAA6BC,CAA7B,EAAgCN,UAAhC,EAA4C;AAC1C,MAAIS,KAAK,GAAGV,KAAK,CAACO,CAAD,CAAjB;AAEA,MAAII,CAAC,GAAGL,CAAC,GAAG,CAAZ;AAEA,MAAIM,IAAI,GAAGN,CAAX;AACA,MAAIO,KAAK,GAAGN,CAAZ;;AAEA,OAAK,IAAIO,CAAC,GAAGR,CAAb,EAAgBQ,CAAC,IAAIP,CAAC,GAAG,CAAzB,EAA4BO,CAAC,EAA7B,EAAiC;AAC/B,QAAId,KAAK,CAACc,CAAD,CAAL,GAAWJ,KAAf,EAAsB;AACpBC,MAAAA,CAAC;AACDV,MAAAA,UAAU,CAACc,IAAX,CAAgB,CAAC,CAACJ,CAAD,EAAIX,KAAK,CAACc,CAAD,CAAT,CAAD,EAAgB,IAAhB,CAAhB;AACAb,MAAAA,UAAU,CAACc,IAAX,CAAgB,CAAC,CAACD,CAAD,EAAId,KAAK,CAACW,CAAD,CAAT,CAAD,EAAgB,IAAhB,CAAhB;AACAK,MAAAA,IAAI,CAAChB,KAAD,EAAQW,CAAR,EAAWG,CAAX,CAAJ;AACD;AACF;;AACDb,EAAAA,UAAU,CAACc,IAAX,CAAgB,CAAC,CAACR,CAAD,EAAIP,KAAK,CAACW,CAAC,GAAG,CAAL,CAAT,CAAD,EAAoB,IAApB,CAAhB;AACAV,EAAAA,UAAU,CAACc,IAAX,CAAgB,CAAC,CAACJ,CAAC,GAAG,CAAL,EAAQX,KAAK,CAACO,CAAD,CAAb,CAAD,EAAoB,IAApB,CAAhB;AACAS,EAAAA,IAAI,CAAChB,KAAD,EAAQW,CAAC,GAAG,CAAZ,EAAeJ,CAAf,CAAJ;AACA,SAAOI,CAAC,GAAG,CAAX;AACD;;AAED,SAASK,IAAT,CAAchB,KAAd,EAAqBW,CAArB,EAAwBG,CAAxB,EAA2B;AACzB,MAAIG,IAAI,GAAGjB,KAAK,CAACW,CAAD,CAAhB;AACAX,EAAAA,KAAK,CAACW,CAAD,CAAL,GAAWX,KAAK,CAACc,CAAD,CAAhB;AACAd,EAAAA,KAAK,CAACc,CAAD,CAAL,GAAWG,IAAX;AACD","sourcesContent":["export function quickSort(array) {\r\n  const animations = [];\r\n  let low = 0;\r\n  let high = array.length - 1;\r\n  quickSortHelper(array, low, high, animations);\r\n  return array;\r\n}\r\n\r\nfunction quickSortHelper(array, l, h, animations) {\r\n  if (l < h) {\r\n    let pi = partition(array, l, h, animations);\r\n    quickSortHelper(array, l, pi - 1, animations);\r\n    quickSortHelper(array, pi + 1, h, animations);\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction partition(array, l, h, animations) {\r\n  let pivot = array[h];\r\n\r\n  let i = l - 1;\r\n\r\n  let left = l;\r\n  let right = h;\r\n\r\n  for (let j = l; j <= h - 1; j++) {\r\n    if (array[j] < pivot) {\r\n      i++;\r\n      animations.push([[i, array[j]], true]);\r\n      animations.push([[j, array[i]], true]);\r\n      swap(array, i, j);\r\n    }\r\n  }\r\n  animations.push([[h, array[i + 1]], true]);\r\n  animations.push([[i + 1, array[h]], true]);\r\n  swap(array, i + 1, h);\r\n  return i + 1;\r\n}\r\n\r\nfunction swap(array, i, j) {\r\n  let temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}