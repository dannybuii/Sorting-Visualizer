{"ast":null,"code":"export function getInsertionSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  insertionSort(auxillaryArray, animations);\n  array = auxillaryArray;\n  console.log(\"compare\");\n  console.log(animations);\n  return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n  const N = auxillaryArray.length;\n\n  for (let i = 1; i < N; i++) {\n    let key = auxillaryArray[i];\n    let j = i - 1;\n    animations.push([\"comparision1\", j, i]);\n    animations.push([\"comparision2\", j, i]);\n\n    while (j >= 0 && auxillaryArray[j] > key) {\n      animations.push([\"overwritey\", j + 1, auxillaryArray[j]]);\n      auxillaryArray[j + 1] = auxillaryArray[j];\n      j = j - 1;\n\n      if (j >= 0) {\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n      }\n    }\n\n    animations.push([\"overwrite\", j + 1, key]);\n    auxillaryArray[j + 1] = key;\n  }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Danny/Documents/Sorting Visualizer/my-app/src/SortingVisualizerAlgorithms/getInsertionSort.js"],"names":["getInsertionSortAnimations","array","animations","auxillaryArray","slice","insertionSort","console","log","N","length","i","key","j","push","arraysAreEqual","firstArray","secondArray"],"mappings":"AAAA,OAAO,SAASA,0BAAT,CAAoCC,KAApC,EAA2C;AAChD,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAArB;AACAC,EAAAA,aAAa,CAACF,cAAD,EAAiBD,UAAjB,CAAb;AACAD,EAAAA,KAAK,GAAGE,cAAR;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACA,SAAO,CAACA,UAAD,EAAaD,KAAb,CAAP;AACD;;AAED,SAASI,aAAT,CAAuBF,cAAvB,EAAuCD,UAAvC,EAAmD;AACjD,QAAMM,CAAC,GAAGL,cAAc,CAACM,MAAzB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;AAC1B,QAAIC,GAAG,GAAGR,cAAc,CAACO,CAAD,CAAxB;AACA,QAAIE,CAAC,GAAGF,CAAC,GAAG,CAAZ;AACAR,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBF,CAApB,CAAhB;AACAR,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBF,CAApB,CAAhB;;AACA,WAAOE,CAAC,IAAI,CAAL,IAAUT,cAAc,CAACS,CAAD,CAAd,GAAoBD,GAArC,EAA0C;AACxCT,MAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,YAAD,EAAeD,CAAC,GAAG,CAAnB,EAAsBT,cAAc,CAACS,CAAD,CAApC,CAAhB;AACAT,MAAAA,cAAc,CAACS,CAAC,GAAG,CAAL,CAAd,GAAwBT,cAAc,CAACS,CAAD,CAAtC;AACAA,MAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;;AACA,UAAIA,CAAC,IAAI,CAAT,EAAY;AACVV,QAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBF,CAApB,CAAhB;AACAR,QAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBF,CAApB,CAAhB;AACD;AACF;;AACDR,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAAC,WAAD,EAAcD,CAAC,GAAG,CAAlB,EAAqBD,GAArB,CAAhB;AACAR,IAAAA,cAAc,CAACS,CAAC,GAAG,CAAL,CAAd,GAAwBD,GAAxB;AACD;AACF;;AAED,SAASG,cAAT,CAAwBC,UAAxB,EAAoCC,WAApC,EAAiD;AAC/C,MAAID,UAAU,CAACN,MAAX,KAAsBO,WAAW,CAACP,MAAtC,EAA8C;AAC5C,WAAO,KAAP;AACD;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACN,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AAC1C,QAAIK,UAAU,CAACL,CAAD,CAAV,KAAkBM,WAAW,CAACN,CAAD,CAAjC,EAAsC;AACpC,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD","sourcesContent":["export function getInsertionSortAnimations(array) {\r\n  let animations = [];\r\n  let auxillaryArray = array.slice();\r\n  insertionSort(auxillaryArray, animations);\r\n  array = auxillaryArray;\r\n  console.log(\"compare\");\r\n  console.log(animations);\r\n  return [animations, array];\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n  const N = auxillaryArray.length;\r\n  for (let i = 1; i < N; i++) {\r\n    let key = auxillaryArray[i];\r\n    let j = i - 1;\r\n    animations.push([\"comparision1\", j, i]);\r\n    animations.push([\"comparision2\", j, i]);\r\n    while (j >= 0 && auxillaryArray[j] > key) {\r\n      animations.push([\"overwritey\", j + 1, auxillaryArray[j]]);\r\n      auxillaryArray[j + 1] = auxillaryArray[j];\r\n      j = j - 1;\r\n      if (j >= 0) {\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n      }\r\n    }\r\n    animations.push([\"overwrite\", j + 1, key]);\r\n    auxillaryArray[j + 1] = key;\r\n  }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n  if (firstArray.length !== secondArray.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < firstArray.length; i++) {\r\n    if (firstArray[i] !== secondArray[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}