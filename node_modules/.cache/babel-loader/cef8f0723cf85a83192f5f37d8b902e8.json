{"ast":null,"code":"export const mergeSort = array => {\n  //Find the middle point\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const middlePoint = Math.floor(array.length / 2);\n  const tempL = array.slice(0, middlePoint);\n  const tempR = array.slice(middlePoint);\n  console.log(\"I am merge\");\n  mergeSortHelper(tempL, tempR);\n};\n\nfunction mergeSortHelper(left, right) {\n  let sortArray = [];\n  let i = 0;\n  let j = 0;\n\n  while (i < left.length && j < right.length) {\n    if (left[i] <= right[j]) {\n      sortArray.push(left[i]);\n      i++;\n    } else {\n      sortArray.push(right[j]);\n      j++;\n    }\n  }\n\n  return sortArray.concat(left.slice(i)).concat(right.slice(j));\n}","map":{"version":3,"sources":["C:/Users/Danny/Desktop/Sorting Visualizer/my-app/src/SortingVisualizerAlgorithms/mergeSort.js"],"names":["mergeSort","array","length","middlePoint","Math","floor","tempL","slice","tempR","console","log","mergeSortHelper","left","right","sortArray","i","j","push","concat"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,KAAD,IAAW;AAClC;AAEA,MAAIA,KAAK,CAACC,MAAN,IAAgB,CAApB,EAAuB;AACrB,WAAOD,KAAP;AACD;;AAED,QAAME,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,MAAN,GAAe,CAA1B,CAApB;AACA,QAAMI,KAAK,GAAGL,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAeJ,WAAf,CAAd;AACA,QAAMK,KAAK,GAAGP,KAAK,CAACM,KAAN,CAAYJ,WAAZ,CAAd;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAC,EAAAA,eAAe,CAACL,KAAD,EAAQE,KAAR,CAAf;AACD,CAZM;;AAcP,SAASG,eAAT,CAAyBC,IAAzB,EAA+BC,KAA/B,EAAsC;AACpC,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAOD,CAAC,GAAGH,IAAI,CAACV,MAAT,IAAmBc,CAAC,GAAGH,KAAK,CAACX,MAApC,EAA4C;AAC1C,QAAIU,IAAI,CAACG,CAAD,CAAJ,IAAWF,KAAK,CAACG,CAAD,CAApB,EAAyB;AACvBF,MAAAA,SAAS,CAACG,IAAV,CAAeL,IAAI,CAACG,CAAD,CAAnB;AACAA,MAAAA,CAAC;AACF,KAHD,MAGO;AACLD,MAAAA,SAAS,CAACG,IAAV,CAAeJ,KAAK,CAACG,CAAD,CAApB;AACAA,MAAAA,CAAC;AACF;AACF;;AAED,SAAOF,SAAS,CAACI,MAAV,CAAiBN,IAAI,CAACL,KAAL,CAAWQ,CAAX,CAAjB,EAAgCG,MAAhC,CAAuCL,KAAK,CAACN,KAAN,CAAYS,CAAZ,CAAvC,CAAP;AACD","sourcesContent":["export const mergeSort = (array) => {\r\n  //Find the middle point\r\n\r\n  if (array.length <= 1) {\r\n    return array;\r\n  }\r\n\r\n  const middlePoint = Math.floor(array.length / 2);\r\n  const tempL = array.slice(0, middlePoint);\r\n  const tempR = array.slice(middlePoint);\r\n  console.log(\"I am merge\");\r\n  mergeSortHelper(tempL, tempR);\r\n};\r\n\r\nfunction mergeSortHelper(left, right) {\r\n  let sortArray = [];\r\n  let i = 0;\r\n  let j = 0;\r\n\r\n  while (i < left.length && j < right.length) {\r\n    if (left[i] <= right[j]) {\r\n      sortArray.push(left[i]);\r\n      i++;\r\n    } else {\r\n      sortArray.push(right[j]);\r\n      j++;\r\n    }\r\n  }\r\n\r\n  return sortArray.concat(left.slice(i)).concat(right.slice(j));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}