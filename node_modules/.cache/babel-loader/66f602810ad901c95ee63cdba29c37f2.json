{"ast":null,"code":"export function quickSort(array) {\n  const animations = []; // let auxillaryArray = array.slice();\n\n  quickSortHelper(array, 0, array.length - 1, animations); // array = auxillaryArray;\n\n  return animations;\n}\n\nfunction quickSortHelper(array, l, h, animations) {\n  if (l < h) {\n    let pi = partition(array, l, h, animations);\n    quickSortHelper(array, l, pi - 1, animations);\n    quickSortHelper(array, pi + 1, h, animations);\n  }\n}\n\nfunction partition(array, l, h, animations) {\n  let pivot = array[h];\n  let i = l - 1;\n  let pivotIndex = l;\n  animations.push([pivotIndex, pivot]);\n\n  for (let j = l; j <= h - 1; j++) {\n    animations.push([j, h]);\n    animations.push([j, h]);\n\n    if (array[j] < pivot) {\n      i++;\n      animations.push([i, array[j]]);\n      animations.push([j, array[i]]);\n      swap(array, i, j);\n    } else {\n      animations.push([0, 0]);\n      animations.push([0, 0]);\n    }\n\n    animations.push([0, 0]);\n    animations.push([0, 0]);\n  }\n\n  animations.push([0, 0]);\n  animations.push([0, 0]);\n  animations.push([0, 0]);\n  animations.push([0, 0]);\n  animations.push([h, array[i + 1]]);\n  animations.push([i + 1, array[h]]);\n  swap(array, i + 1, h);\n  return i + 1;\n}\n\nfunction swap(array, i, j) {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}","map":{"version":3,"sources":["C:/Users/Danny/Documents/Sorting Visualizer/my-app/src/SortingVisualizerAlgorithms/quickSort.js"],"names":["quickSort","array","animations","quickSortHelper","length","l","h","pi","partition","pivot","i","pivotIndex","push","j","swap","temp"],"mappings":"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","sourcesContent":["export function quickSort(array) {\r\n  const animations = [];\r\n  // let auxillaryArray = array.slice();\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  // array = auxillaryArray;\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, l, h, animations) {\r\n  if (l < h) {\r\n    let pi = partition(array, l, h, animations);\r\n    quickSortHelper(array, l, pi - 1, animations);\r\n    quickSortHelper(array, pi + 1, h, animations);\r\n  }\r\n}\r\n\r\nfunction partition(array, l, h, animations) {\r\n  let pivot = array[h];\r\n  let i = l - 1;\r\n  let pivotIndex = l;\r\n  animations.push([pivotIndex, pivot]);\r\n  for (let j = l; j <= h - 1; j++) {\r\n    animations.push([j, h]);\r\n    animations.push([j, h]);\r\n    if (array[j] < pivot) {\r\n      i++;\r\n      animations.push([i, array[j]]);\r\n      animations.push([j, array[i]]);\r\n      swap(array, i, j);\r\n    } else {\r\n      animations.push([0, 0]);\r\n      animations.push([0, 0]);\r\n    }\r\n    animations.push([0, 0]);\r\n    animations.push([0, 0]);\r\n  }\r\n\r\n  animations.push([0, 0]);\r\n  animations.push([0, 0]);\r\n\r\n  animations.push([0, 0]);\r\n  animations.push([0, 0]);\r\n\r\n  animations.push([h, array[i + 1]]);\r\n  animations.push([i + 1, array[h]]);\r\n  swap(array, i + 1, h);\r\n  return i + 1;\r\n}\r\n\r\nfunction swap(array, i, j) {\r\n  let temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}