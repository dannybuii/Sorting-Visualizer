{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n  array = auxillaryArray;\n  return animations;\n}\ngetQuickSortAnimations([7, 2, 1, 6]);\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n  let pivotIndex;\n\n  if (startIndex < endIndex) {\n    pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n    quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n    quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n  }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n  let pivot = auxillaryArray[endIndex];\n  let pivotIndex = startIndex;\n\n  for (let i = startIndex; i <= endIndex - 1; i++) {\n    animations.push([i, endIndex]);\n    animations.push([i, endIndex]);\n\n    if (auxillaryArray[i] <= pivot) {\n      //Swap these two heights\n      animations.push([i, auxillaryArray[pivotIndex]]);\n      animations.push([pivotIndex, auxillaryArray[i]]);\n      swap(auxillaryArray, i, pivotIndex);\n      pivotIndex++;\n    } else {} //   animations.push([-1, -1]);\n    //   animations.push([-1, -1]);\n    // animations.push([-1, -1]);\n    // animations.push([-1, -1]);\n\n  } //   animations.push([-1, -1]);\n  //   animations.push([-1, -1]);\n  //   animations.push([-1, -1]);\n  //   animations.push([-1, -1]);\n  //Swap these two heights\n\n\n  animations.push([pivotIndex, auxillaryArray[endIndex]]);\n  animations.push([endIndex, auxillaryArray[pivotIndex]]);\n  swap(auxillaryArray, pivotIndex, endIndex);\n  return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Danny/Documents/Sorting Visualizer/my-app/src/SortingVisualizerAlgorithms/quickSortAna.js"],"names":["getQuickSortAnimations","array","animations","auxillaryArray","slice","quickSort","length","startIndex","endIndex","pivotIndex","partitionArray","pivot","i","push","swap","firstIndex","secondIndex","temp","arraysAreEqual","firstArray","secondArray"],"mappings":"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","sourcesContent":["export function getQuickSortAnimations(array) {\r\n  let animations = [];\r\n  let auxillaryArray = array.slice();\r\n  quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n  array = auxillaryArray;\r\n  return animations;\r\n}\r\n\r\ngetQuickSortAnimations([7, 2, 1, 6]);\r\n\r\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n  let pivotIndex;\r\n  if (startIndex < endIndex) {\r\n    pivotIndex = partitionArray(\r\n      auxillaryArray,\r\n      startIndex,\r\n      endIndex,\r\n      animations\r\n    );\r\n    quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n    quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n  }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n  let pivot = auxillaryArray[endIndex];\r\n  let pivotIndex = startIndex;\r\n  for (let i = startIndex; i <= endIndex - 1; i++) {\r\n    animations.push([i, endIndex]);\r\n    animations.push([i, endIndex]);\r\n    if (auxillaryArray[i] <= pivot) {\r\n      //Swap these two heights\r\n      animations.push([i, auxillaryArray[pivotIndex]]);\r\n      animations.push([pivotIndex, auxillaryArray[i]]);\r\n      swap(auxillaryArray, i, pivotIndex);\r\n      pivotIndex++;\r\n    } else {\r\n      //   animations.push([-1, -1]);\r\n      //   animations.push([-1, -1]);\r\n    }\r\n    // animations.push([-1, -1]);\r\n    // animations.push([-1, -1]);\r\n  }\r\n  //   animations.push([-1, -1]);\r\n  //   animations.push([-1, -1]);\r\n  //   animations.push([-1, -1]);\r\n  //   animations.push([-1, -1]);\r\n  //Swap these two heights\r\n  animations.push([pivotIndex, auxillaryArray[endIndex]]);\r\n  animations.push([endIndex, auxillaryArray[pivotIndex]]);\r\n  swap(auxillaryArray, pivotIndex, endIndex);\r\n  return pivotIndex;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n  let temp = auxillaryArray[firstIndex];\r\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n  auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n  if (firstArray.length !== secondArray.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < firstArray.length; i++) {\r\n    if (firstArray[i] !== secondArray[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}