{"ast":null,"code":"export function insertionSort(array) {\n  const animations = [];\n\n  for (let i = 1; i < array.length; i++) {\n    let j = i;\n\n    while (j > 0 && array[j - 1] > array[j]) {\n      animations.push([j, array[j - 1]]);\n      animations.push([j - 1, array[j]]);\n      swap(array, j);\n      j = j - 1;\n    }\n  }\n\n  animations.push([j, array[j - 1]]);\n  animations.push([j - 1, array[j]]);\n  return array;\n}\n\nfunction swap(array, j) {\n  let temp = array[j];\n  array[j] = array[j - 1];\n  array[j - 1] = temp;\n}","map":{"version":3,"sources":["C:/Users/Danny/Documents/Sorting Visualizer/my-app/src/SortingVisualizerAlgorithms/insertionSort.js"],"names":["insertionSort","array","animations","i","length","j","push","swap","temp"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AACnC,QAAMC,UAAU,GAAG,EAAnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIE,CAAC,GAAGF,CAAR;;AAEA,WAAOE,CAAC,GAAG,CAAJ,IAASJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAL,GAAeJ,KAAK,CAACI,CAAD,CAApC,EAAyC;AACvCH,MAAAA,UAAU,CAACI,IAAX,CAAgB,CAACD,CAAD,EAAIJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAT,CAAhB;AACAH,MAAAA,UAAU,CAACI,IAAX,CAAgB,CAACD,CAAC,GAAG,CAAL,EAAQJ,KAAK,CAACI,CAAD,CAAb,CAAhB;AACAE,MAAAA,IAAI,CAACN,KAAD,EAAQI,CAAR,CAAJ;AACAA,MAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD;AACF;;AACDH,EAAAA,UAAU,CAACI,IAAX,CAAgB,CAACD,CAAD,EAAIJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAT,CAAhB;AACAH,EAAAA,UAAU,CAACI,IAAX,CAAgB,CAACD,CAAC,GAAG,CAAL,EAAQJ,KAAK,CAACI,CAAD,CAAb,CAAhB;AACA,SAAOJ,KAAP;AACD;;AAED,SAASM,IAAT,CAAcN,KAAd,EAAqBI,CAArB,EAAwB;AACtB,MAAIG,IAAI,GAAGP,KAAK,CAACI,CAAD,CAAhB;AACAJ,EAAAA,KAAK,CAACI,CAAD,CAAL,GAAWJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAhB;AACAJ,EAAAA,KAAK,CAACI,CAAC,GAAG,CAAL,CAAL,GAAeG,IAAf;AACD","sourcesContent":["export function insertionSort(array) {\r\n  const animations = [];\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n\r\n    while (j > 0 && array[j - 1] > array[j]) {\r\n      animations.push([j, array[j - 1]]);\r\n      animations.push([j - 1, array[j]]);\r\n      swap(array, j);\r\n      j = j - 1;\r\n    }\r\n  }\r\n  animations.push([j, array[j - 1]]);\r\n  animations.push([j - 1, array[j]]);\r\n  return array;\r\n}\r\n\r\nfunction swap(array, j) {\r\n  let temp = array[j];\r\n  array[j] = array[j - 1];\r\n  array[j - 1] = temp;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}