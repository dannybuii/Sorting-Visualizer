{"ast":null,"code":"export function insertionSort(array) {\n  const animations = [];\n\n  for (let i = 1; i < array.length; i++) {\n    let j = i;\n    animations.push([\"compare1\", 0, i]);\n    animations.push([\"compare2\", 0, i]);\n\n    while (j > 0 && array[j - 1] > array[j]) {\n      animations.push([\"loop\", j, array[j - 1]]);\n      animations.push([\"loop\", j - 1, array[j]]);\n      swap(array, j);\n      j = j - 1;\n    }\n\n    animations.push([\"end loop\", j - 1, array[i]]);\n  }\n\n  console.log(animations);\n  return animations;\n}\n\nfunction swap(array, j) {\n  let temp = array[j];\n  array[j] = array[j - 1];\n  array[j - 1] = temp;\n}","map":{"version":3,"sources":["C:/Users/Danny/Documents/Sorting Visualizer/my-app/src/SortingVisualizerAlgorithms/insertionSort.js"],"names":["insertionSort","array","animations","i","length","j","push","swap","console","log","temp"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AACnC,QAAMC,UAAU,GAAG,EAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIE,CAAC,GAAGF,CAAR;AACAD,IAAAA,UAAU,CAACI,IAAX,CAAgB,CAAC,UAAD,EAAa,CAAb,EAAgBH,CAAhB,CAAhB;AACAD,IAAAA,UAAU,CAACI,IAAX,CAAgB,CAAC,UAAD,EAAa,CAAb,EAAgBH,CAAhB,CAAhB;;AACA,WAAOE,CAAC,GAAG,CAAJ,IAASJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAL,GAAeJ,KAAK,CAACI,CAAD,CAApC,EAAyC;AACvCH,MAAAA,UAAU,CAACI,IAAX,CAAgB,CAAC,MAAD,EAASD,CAAT,EAAYJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAjB,CAAhB;AACAH,MAAAA,UAAU,CAACI,IAAX,CAAgB,CAAC,MAAD,EAASD,CAAC,GAAG,CAAb,EAAgBJ,KAAK,CAACI,CAAD,CAArB,CAAhB;AACAE,MAAAA,IAAI,CAACN,KAAD,EAAQI,CAAR,CAAJ;AACAA,MAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD;;AACDH,IAAAA,UAAU,CAACI,IAAX,CAAgB,CAAC,UAAD,EAAaD,CAAC,GAAG,CAAjB,EAAoBJ,KAAK,CAACE,CAAD,CAAzB,CAAhB;AACD;;AACDK,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AACA,SAAOA,UAAP;AACD;;AAED,SAASK,IAAT,CAAcN,KAAd,EAAqBI,CAArB,EAAwB;AACtB,MAAIK,IAAI,GAAGT,KAAK,CAACI,CAAD,CAAhB;AACAJ,EAAAA,KAAK,CAACI,CAAD,CAAL,GAAWJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAhB;AACAJ,EAAAA,KAAK,CAACI,CAAC,GAAG,CAAL,CAAL,GAAeK,IAAf;AACD","sourcesContent":["export function insertionSort(array) {\r\n  const animations = [];\r\n\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n    animations.push([\"compare1\", 0, i]);\r\n    animations.push([\"compare2\", 0, i]);\r\n    while (j > 0 && array[j - 1] > array[j]) {\r\n      animations.push([\"loop\", j, array[j - 1]]);\r\n      animations.push([\"loop\", j - 1, array[j]]);\r\n      swap(array, j);\r\n      j = j - 1;\r\n    }\r\n    animations.push([\"end loop\", j - 1, array[i]]);\r\n  }\r\n  console.log(animations);\r\n  return animations;\r\n}\r\n\r\nfunction swap(array, j) {\r\n  let temp = array[j];\r\n  array[j] = array[j - 1];\r\n  array[j - 1] = temp;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}