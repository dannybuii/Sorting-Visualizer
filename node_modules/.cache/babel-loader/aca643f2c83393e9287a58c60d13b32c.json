{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Danny\\\\Documents\\\\Sorting Visualizer\\\\my-app\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from \"react\";\nimport \"./SortingVisualizer.css\";\nimport { mergeSort } from \"../SortingVisualizerAlgorithms/mergeSort.js\";\nimport { quickSort } from \"../SortingVisualizerAlgorithms/quickSort.js\";\nimport { insertionSort } from \"../SortingVisualizerAlgorithms/insertionSort.js\";\nimport { getInsertionSortAnimations } from \"../SortingVisualizerAlgorithms/getInsertionSort.js\"; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = \"turquoise\"; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = \"red\";\n\nfunction randomInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction areTheyEqual(a1, a2) {\n  if (a1.length !== a2.length) return false;\n\n  for (let i = 0; i < a1.length; i++) {\n    if (a1[i] !== a2[i]) return false;\n  }\n\n  return true;\n}\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 450; i++) {\n      array.push(randomInteger(5, 1000));\n    }\n\n    console.log(array);\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = mergeSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = quickSort(this.state.array);\n\n    for (let i = 0; i < animations.length - 1; i++) {\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n      if (isColorChange) {\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  insertionSort() {\n    let compare = this.state.array.slice();\n    const animations = insertionSort(this.state.array);\n    const compareArray = getInsertionSortAnimations(compare);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"compare1\" || animations[i][0] === \"compare2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n      if (isColorChange) {\n        const color = animations[i][0] === \"compare1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [status, barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [status, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  selectionSort() {}\n\n  heapSort() {}\n\n  bubbleSort() {}\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, \"Sorting Visualizer\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, \"Reset Array\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.insertionSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, \"Insertion Sort\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.selectionSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, \"Selection Sort\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, \"Heap Sort\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, array.map((value, x) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: x,\n      style: {\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Danny/Documents/Sorting Visualizer/my-app/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","mergeSort","quickSort","insertionSort","getInsertionSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","randomInteger","min","max","Math","floor","random","areTheyEqual","a1","a2","length","i","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","push","console","log","setState","animations","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","barOneIndex","barTwoIndex","barIndex","barStyle","compare","slice","compareArray","status","selectionSort","heapSort","bubbleSort","render","map","value","x"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;AACA,SAASC,SAAT,QAA0B,6CAA1B;AACA,SAASC,SAAT,QAA0B,6CAA1B;AACA,SAASC,aAAT,QAA8B,iDAA9B;AACA,SAASC,0BAAT,QAA2C,oDAA3C,C,CAEA;;AACA,MAAMC,kBAAkB,GAAG,CAA3B,C,CAEA;;AACA,MAAMC,oBAAoB,GAAG,GAA7B,C,CAEA;;AACA,MAAMC,aAAa,GAAG,WAAtB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,KAAxB;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACD;;AAED,SAASK,YAAT,CAAsBC,EAAtB,EAA0BC,EAA1B,EAA8B;AAC5B,MAAID,EAAE,CAACE,MAAH,KAAcD,EAAE,CAACC,MAArB,EAA6B,OAAO,KAAP;;AAC7B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,EAAE,CAACE,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;AAClC,QAAIH,EAAE,CAACG,CAAD,CAAF,KAAUF,EAAE,CAACE,CAAD,CAAhB,EAAqB,OAAO,KAAP;AACtB;;AAED,SAAO,IAAP;AACD;;AAED,eAAe,MAAMC,iBAAN,SAAgCpB,KAAK,CAACqB,SAAtC,CAAgD;AAC7DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD;;AAEDA,EAAAA,UAAU,GAAG;AACX,UAAMF,KAAK,GAAG,EAAd;;AAEA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BM,MAAAA,KAAK,CAACG,IAAN,CAAWnB,aAAa,CAAC,CAAD,EAAI,IAAJ,CAAxB;AACD;;AACDoB,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,SAAKM,QAAL,CAAc;AAAEN,MAAAA;AAAF,KAAd;AACD;;AAEDxB,EAAAA,SAAS,GAAG;AACV,UAAM+B,UAAU,GAAG/B,SAAS,CAAC,KAAKuB,KAAL,CAAWC,KAAZ,CAA5B;;AAEA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,UAAU,CAACd,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AAC1C,YAAMc,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMC,aAAa,GAAGjB,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIiB,aAAJ,EAAmB;AACjB,cAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBN,UAAU,CAACb,CAAD,CAAzC;AACA,cAAMoB,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,cAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,cAAME,KAAK,GAAGvB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcX,eAAd,GAAgCD,aAA9C;AACAoC,QAAAA,UAAU,CAAC,MAAM;AACfJ,UAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,UAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACD,SAHS,EAGPvB,CAAC,GAAGd,kBAHG,CAAV;AAID,OATD,MASO;AACLsC,QAAAA,UAAU,CAAC,MAAM;AACf,gBAAM,CAACN,SAAD,EAAYQ,SAAZ,IAAyBb,UAAU,CAACb,CAAD,CAAzC;AACA,gBAAMoB,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACAD,UAAAA,WAAW,CAACO,MAAZ,GAAsB,GAAED,SAAU,IAAlC;AACD,SAJS,EAIP1B,CAAC,GAAGd,kBAJG,CAAV;AAKD;AACF;AACF;;AAEDH,EAAAA,SAAS,GAAG;AACV,UAAM8B,UAAU,GAAG9B,SAAS,CAAC,KAAKsB,KAAL,CAAWC,KAAZ,CAA5B;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,UAAU,CAACd,MAAX,GAAoB,CAAxC,EAA2CC,CAAC,EAA5C,EAAgD;AAC9C,YAAMiB,aAAa,GAAGjB,CAAC,GAAG,CAAJ,KAAU,CAAV,IAAeA,CAAC,GAAG,CAAJ,KAAU,CAA/C;AACA,YAAMc,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;;AACA,UAAIC,aAAJ,EAAmB;AACjB,cAAMM,KAAK,GAAGvB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcX,eAAd,GAAgCD,aAA9C;AACA,cAAM,CAACwC,WAAD,EAAcC,WAAd,IAA6BhB,UAAU,CAACb,CAAD,CAA7C;AAEA,cAAMoB,WAAW,GAAGN,SAAS,CAACc,WAAD,CAAT,CAAuBP,KAA3C;AAEA,cAAMC,WAAW,GAAGR,SAAS,CAACe,WAAD,CAAT,CAAuBR,KAA3C;AAEAG,QAAAA,UAAU,CAAC,MAAM;AACfJ,UAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,UAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACD,SAHS,EAGPvB,CAAC,GAAGd,kBAHG,CAAV;AAID,OAZD,MAYO;AACL,cAAM,CAAC4C,QAAD,EAAWJ,SAAX,IAAwBb,UAAU,CAACb,CAAD,CAAxC;AACA,cAAM+B,QAAQ,GAAGjB,SAAS,CAACgB,QAAD,CAAT,CAAoBT,KAArC;AACAG,QAAAA,UAAU,CAAC,MAAM;AACfO,UAAAA,QAAQ,CAACJ,MAAT,GAAmB,GAAED,SAAU,IAA/B;AACD,SAFS,EAEP1B,CAAC,GAAGd,kBAFG,CAAV;AAGD;AACF;AACF;;AAEDF,EAAAA,aAAa,GAAG;AACd,QAAIgD,OAAO,GAAG,KAAK3B,KAAL,CAAWC,KAAX,CAAiB2B,KAAjB,EAAd;AACA,UAAMpB,UAAU,GAAG7B,aAAa,CAAC,KAAKqB,KAAL,CAAWC,KAAZ,CAAhC;AACA,UAAM4B,YAAY,GAAGjD,0BAA0B,CAAC+C,OAAD,CAA/C;;AACA,SAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,UAAU,CAACd,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AAC1C,YAAMiB,aAAa,GACjBJ,UAAU,CAACb,CAAD,CAAV,CAAc,CAAd,MAAqB,UAArB,IAAmCa,UAAU,CAACb,CAAD,CAAV,CAAc,CAAd,MAAqB,UAD1D;AAEA,YAAMc,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;;AACA,UAAIC,aAAJ,EAAmB;AACjB,cAAMM,KAAK,GACTV,UAAU,CAACb,CAAD,CAAV,CAAc,CAAd,MAAqB,UAArB,GAAkCX,eAAlC,GAAoDD,aADtD;AAGA,cAAM,CAAC+C,MAAD,EAASjB,SAAT,EAAoBC,SAApB,IAAiCN,UAAU,CAACb,CAAD,CAAjD;AACA,cAAMoB,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,cAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACAG,QAAAA,UAAU,CAAC,MAAM;AACfJ,UAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,UAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACD,SAHS,EAGPvB,CAAC,GAAGd,kBAHG,CAAV;AAID,OAXD,MAWO;AACL,cAAM,CAACiD,MAAD,EAASL,QAAT,EAAmBJ,SAAnB,IAAgCb,UAAU,CAACb,CAAD,CAAhD;AACA,cAAM+B,QAAQ,GAAGjB,SAAS,CAACgB,QAAD,CAAT,CAAoBT,KAArC;AACAG,QAAAA,UAAU,CAAC,MAAM;AACfO,UAAAA,QAAQ,CAACJ,MAAT,GAAmB,GAAED,SAAU,IAA/B;AACD,SAFS,EAEP1B,CAAC,GAAGd,kBAFG,CAAV;AAGD;AACF;AACF;;AAEDkD,EAAAA,aAAa,GAAG,CAAE;;AAClBC,EAAAA,QAAQ,GAAG,CAAE;;AACbC,EAAAA,UAAU,GAAG,CAAE;;AAEfC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEjC,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AAEA,wBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKG,UAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,EAEiE,GAFjE,eAGE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAK1B,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,EAG+D,GAH/D,eAIE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKC,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,EAI+D,GAJ/D,eAKE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKC,aAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALF,EAKuE,GALvE,eAME;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKoD,aAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANF,EAMuE,GANvE,eAOE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKC,QAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPF,EAO6D,GAP7D,eAQE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKC,UAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBARF,EAQiE,GARjE,eASE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGhC,KAAK,CAACkC,GAAN,CAAU,CAACC,KAAD,EAAQC,CAAR,kBACT;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,GAAG,EAAEA,CAFP;AAGE,MAAA,KAAK,EAAE;AAAEf,QAAAA,MAAM,EAAG,GAAEc,KAAM;AAAnB,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CATF,CADF;AAqBD;;AApI4D","sourcesContent":["import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport { mergeSort } from \"../SortingVisualizerAlgorithms/mergeSort.js\";\r\nimport { quickSort } from \"../SortingVisualizerAlgorithms/quickSort.js\";\r\nimport { insertionSort } from \"../SortingVisualizerAlgorithms/insertionSort.js\";\r\nimport { getInsertionSortAnimations } from \"../SortingVisualizerAlgorithms/getInsertionSort.js\";\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nfunction randomInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction areTheyEqual(a1, a2) {\r\n  if (a1.length !== a2.length) return false;\r\n  for (let i = 0; i < a1.length; i++) {\r\n    if (a1[i] !== a2[i]) return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n\r\n    for (let i = 0; i < 450; i++) {\r\n      array.push(randomInteger(5, 1000));\r\n    }\r\n    console.log(array);\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = mergeSort(this.state.array);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const animations = quickSort(this.state.array);\r\n    for (let i = 0; i < animations.length - 1; i++) {\r\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange) {\r\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [barIndex, newHeight] = animations[i];\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertionSort() {\r\n    let compare = this.state.array.slice();\r\n    const animations = insertionSort(this.state.array);\r\n    const compareArray = getInsertionSortAnimations(compare);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"compare1\" || animations[i][0] === \"compare2\";\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange) {\r\n        const color =\r\n          animations[i][0] === \"compare1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n        const [status, barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [status, barIndex, newHeight] = animations[i];\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectionSort() {}\r\n  heapSort() {}\r\n  bubbleSort() {}\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <h1>Sorting Visualizer</h1>\r\n        <button onClick={() => this.resetArray()}>Reset Array</button>{\" \"}\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>{\" \"}\r\n        <button onClick={() => this.quickSort()}>Quick Sort</button>{\" \"}\r\n        <button onClick={() => this.insertionSort()}>Insertion Sort</button>{\" \"}\r\n        <button onClick={() => this.selectionSort()}>Selection Sort</button>{\" \"}\r\n        <button onClick={() => this.heapSort()}>Heap Sort</button>{\" \"}\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>{\" \"}\r\n        <div className=\"array-container\">\r\n          {array.map((value, x) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={x}\r\n              style={{ height: `${value}px` }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}